/**
 * map.js - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ö‡∏¥‡∏ô
 * Map Explorer PRO - Pastel Cute Theme
 */

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ
// ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® map ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÉ‡∏ô index.html ‡πÅ‡∏•‡πâ‡∏ß
// let map;
let currentMarker;
let destinationMarker;
let pastRouteLine;
let futureRouteLine;
let airplaneMarker;
let distanceLabel;
let remainingDistanceLabel;
let totalDistance = 0;
let animationInProgress = false;
let currentPosition = { lat: 48.8566, lng: 2.3522 }; // Paris coordinates
let currentDestination = '';

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á
let cameraFollow = true;
let zoomOutTriggered = false;

// ‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ò‡∏µ‡∏° Pastel ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡πà‡∏ô‡∏ä‡∏±‡∏î‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
const pastelColors = {
  primary: '#FF78A9',  // ‡∏™‡∏µ‡∏ä‡∏°‡∏û‡∏π‡∏™‡∏î‡∏Ç‡∏∂‡πâ‡∏ô (‡πÄ‡∏î‡∏¥‡∏°: #ffb6c1)
  secondary: '#75C6E0',  // ‡∏™‡∏µ‡∏ü‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡∏∂‡πâ‡∏ô (‡πÄ‡∏î‡∏¥‡∏°: #a5dee5)
  accent: '#FFDA4A',    // ‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏™‡∏î‡∏Ç‡∏∂‡πâ‡∏ô (‡πÄ‡∏î‡∏¥‡∏°: #fdfd96)
  mint: '#80E8B6',     // ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏°‡∏¥‡∏ô‡∏ï‡πå‡∏™‡∏î‡∏Ç‡∏∂‡πâ‡∏ô (‡πÄ‡∏î‡∏¥‡∏°: #b5ead7)
  lavender: '#C278FF',  // ‡∏™‡∏µ‡∏°‡πà‡∏ß‡∏á‡∏™‡∏î‡∏Ç‡∏∂‡πâ‡∏ô (‡πÄ‡∏î‡∏¥‡∏°: #e0c3fc)
  peach: '#FFB26B'      // ‡∏™‡∏µ‡∏™‡πâ‡∏°‡∏û‡∏µ‡∏ä‡∏™‡∏î‡∏Ç‡∏∂‡πâ‡∏ô (‡πÄ‡∏î‡∏¥‡∏°: #ffdab9)
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
function initMap() {
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Leaflet
  map = L.map('map', {
    zoomControl: false // ‡∏ã‡πà‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏° zoom ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  }).setView([currentPosition.lat, currentPosition.lng], 5);
  
  console.log('Map initialized');
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° zoom control ‡πÉ‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤
  L.control.zoom({
    position: 'bottomright'
  }).addTo(map);
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° tile layer ‡∏à‡∏≤‡∏Å OpenStreetMap
  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
  }).addTo(map);
  
  // ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á CSS ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏ò‡∏µ‡∏° Pastel
  document.querySelector('.leaflet-control-zoom').style.borderRadius = '20px';
  document.querySelector('.leaflet-control-zoom').style.overflow = 'hidden';
  document.querySelector('.leaflet-control-zoom').style.boxShadow = '0 4px 10px rgba(0,0,0,0.1)';
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° marker ‡∏Ç‡∏≠‡∏á‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  const initialIcon = createMarkerIcon('primary');
  
  currentMarker = L.marker([currentPosition.lat, currentPosition.lng], {
    icon: initialIcon
  }).addTo(map)
    .bindPopup(createCustomPopup('üóº Paris - ‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô'))
    .openPopup();
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ö‡∏¥‡∏ô‡πÅ‡∏ö‡∏ö PRO ‡∏î‡πâ‡∏ß‡∏¢ SVG ‡πÅ‡∏ö‡∏ö‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å
  const airplaneIcon = createAirplaneIcon(0);
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á marker ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ö‡∏¥‡∏ô (‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà)
  airplaneMarker = L.marker([0, 0], { icon: airplaneIcon, zIndexOffset: 1000 });
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° event listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏≥‡∏ó‡∏≤‡∏á
  document.getElementById('navigate').addEventListener('click', navigateToDestination);
  
  // ‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ã‡∏π‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡πâ‡πÉ‡∏Å‡∏•‡πâ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
  map.setZoom(6);
  
  // ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á popup ‡∏Ç‡∏≠‡∏á leaflet ‡πÉ‡∏´‡πâ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡∏¢‡∏¥‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
  customizeLeafletPopup();
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á popup ‡∏Ç‡∏≠‡∏á leaflet
function customizeLeafletPopup() {
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö popup
  const styleTag = document.createElement('style');
  styleTag.innerHTML = `
    .leaflet-popup-content-wrapper {
      background: rgba(255, 255, 255, 0.9);
      border-radius: 20px;
      border: 3px solid ${pastelColors.primary};
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    }
    .leaflet-popup-tip {
      background: ${pastelColors.primary};
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    }
    .leaflet-popup-content {
      margin: 13px 19px;
      line-height: 1.4;
      font-family: 'Mali', sans-serif;
      font-size: 14px;
      color: #7c6c77;
    }
    .custom-popup {
      display: flex;
      align-items: center;
      padding: 5px;
    }
    .custom-popup-icon {
      margin-right: 8px;
      font-size: 18px;
    }
    .custom-popup-text {
      font-weight: 600;
    }
    .distance-label {
      background-color: rgba(255, 255, 255, 0.9);
      border: 2px solid ${pastelColors.accent};
      border-radius: 15px;
      padding: 5px 10px;
      font-family: 'Mali', sans-serif;
      font-weight: 600;
      font-size: 13px;
      color: #7c6c77;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }
    .remaining-distance {
      background-color: rgba(255, 255, 255, 0.9);
      border: 2px solid ${pastelColors.mint};
      border-radius: 15px;
      padding: 5px 10px;
      font-family: 'Mali', sans-serif;
      font-weight: 600;
      font-size: 13px;
      color: #7c6c77;
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
      display: flex;
      align-items: center;
      z-index: 1000;
    }
    .remaining-distance-icon {
      margin-right: 5px;
      font-size: 16px;
    }
  `;
  document.head.appendChild(styleTag);
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á custom popup content
function createCustomPopup(text) {
  const content = `
    <div class="custom-popup">
      <div class="custom-popup-text">${text}</div>
    </div>
  `;
  return content;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ö‡∏¥‡∏ô
function createAirplaneIcon(angle) {
  return L.divIcon({
    html: `
      <div class="airplane-container animate-float">
        <div class="pulse-circle"></div>
        <svg class="airplane-icon" viewBox="0 0 24 24" fill="${pastelColors.primary}" style="transform: rotate(${angle}deg); filter: drop-shadow(0 0 3px #fff) drop-shadow(0 0 5px rgba(0,0,0,0.2));">
          <path d="M21,16V14L13,9V3.5A1.5,1.5,0,0,0,11.5,2h0A1.5,1.5,0,0,0,10,3.5V9L2,14V16L10,13.5V19L8,20.5V22L11.5,21L15,22V20.5L13,19V13.5Z" stroke="#fff" stroke-width="0.8" />
        </svg>
      </div>
    `,
    className: '',
    iconSize: [50, 50],  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏à‡∏≤‡∏Å 45 ‡πÄ‡∏õ‡πá‡∏ô 50
    iconAnchor: [25, 25]  // ‡∏õ‡∏£‡∏±‡∏ö anchor ‡∏ï‡∏≤‡∏° iconSize
  });
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á marker icon ‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
function createMarkerIcon(colorType) {
  let markerColor = pastelColors.primary; // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏ä‡∏°‡∏û‡∏π
  
  switch(colorType) {
    case 'primary':
      markerColor = pastelColors.primary;
      break;
    case 'secondary':
      markerColor = pastelColors.secondary;
      break;
    case 'accent':
      markerColor = pastelColors.accent;
      break;
    case 'mint':
      markerColor = pastelColors.mint;
      break;
    case 'lavender':
      markerColor = pastelColors.lavender;
      break;
    case 'peach':
      markerColor = pastelColors.peach;
      break;
  }
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á marker icon ‡πÅ‡∏ö‡∏ö‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å‡πÜ ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏î‡πà‡∏ô‡∏ä‡∏±‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
  return L.divIcon({
    html: `
      <div class="animate-pulse" style="width: 45px; height: 45px; position: relative;">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="45" height="45">
          <filter id="glow" x="-30%" y="-30%" width="160%" height="160%">
            <feGaussianBlur stdDeviation="2" result="glow"/>
            <feComposite in="SourceGraphic" in2="glow" operator="over"/>
          </filter>
          <path fill="${markerColor}" stroke="#fff" stroke-width="1" filter="url(#glow)" d="M12,11.5A2.5,2.5 0 0,1 9.5,9A2.5,2.5 0 0,1 12,6.5A2.5,2.5 0 0,1 14.5,9A2.5,2.5 0 0,1 12,11.5M12,2A7,7 0 0,0 5,9C5,14.25 12,22 12,22C12,22 19,14.25 19,9A7,7 0 0,0 12,2Z" />
        </svg>
        <div style="position: absolute; top: -5px; right: -5px; background-color: white; border-radius: 50%; width: 18px; height: 18px; display: flex; justify-content: center; align-items: center; box-shadow: 0 2px 5px rgba(0,0,0,0.1);">
          <span style="font-size: 12px;">üìç</span>
        </div>
      </div>
    `,
    className: '',
    iconSize: [45, 45],
    iconAnchor: [22, 45],
    popupAnchor: [0, -45]
  });
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≠‡∏á‡∏à‡∏∏‡∏î‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢ km
function calculateDistance(lat1, lon1, lat2, lon2) {
  const R = 6371; // ‡∏£‡∏±‡∏®‡∏°‡∏µ‡πÇ‡∏•‡∏Å‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢ km
  const dLat = (lat2 - lat1) * Math.PI / 180;
  const dLon = (lon2 - lon1) * Math.PI / 180;
  const a = 
    Math.sin(dLat/2) * Math.sin(dLat/2) +
    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * 
    Math.sin(dLon/2) * Math.sin(dLon/2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
  const distance = R * c; // ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢ km
  return distance;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á label ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á
function createDistanceLabel(distance) {
  return `<div class="distance-label">üõ£Ô∏è ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á: ${distance.toFixed(1)} ‡∏Å‡∏°.</div>`;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á label ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
function createRemainingDistanceLabel(distance) {
  return `<div class="remaining-distance">
    <span class="remaining-distance-icon">üõ¨</span>
    <span>‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${distance.toFixed(1)} ‡∏Å‡∏°.</span>
  </div>`;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏≤‡∏¢
async function navigateToDestination() {
  const destinationInput = document.getElementById('destination').value;
  
  if (!destinationInput) {
    showNotification('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á üåç', 'error');
    // ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
    try {
      if (window.SoundSystem && typeof window.SoundSystem.play === 'function') {
        window.SoundSystem.play('chime');
      } else {
        console.warn('SoundSystem not available or play method not found');
      }
    } catch (err) {
      console.error('Error playing sound:', err);
    }
    return;
  }
  
  if (animationInProgress) {
    showNotification('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà! ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ö‡∏¥‡∏ô‡∏ñ‡∏∂‡∏á‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏≤‡∏¢‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞ ‚úàÔ∏è', 'info', true);
    // ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
    try {
      if (window.SoundSystem && typeof window.SoundSystem.play === 'function') {
        window.SoundSystem.play('chime');
      }
    } catch (err) {
      console.error('Error playing sound:', err);
    }
    return;
  }
  
  try {
    // ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ï‡∏≠‡∏ô‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏≥‡∏ó‡∏≤‡∏á
    try {
      if (window.SoundSystem && typeof window.SoundSystem.play === 'function') {
        window.SoundSystem.play('request');
      }
    } catch (err) {
      console.error('Error playing sound:', err);
    }
    
    // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î
    const navigateBtn = document.getElementById('navigate');
    navigateBtn.innerHTML = '<div class="animate-spin" style="border:2px solid #fff;border-top-color:transparent;border-radius:50%;width:20px;height:20px;margin:0 auto;"></div>';
    navigateBtn.disabled = true;
    
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà
    const response = await fetch(`/api/geocode?place=${encodeURIComponent(destinationInput)}`);
    const data = await response.json();
    
    if (response.ok) {
      // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      const destination = { lat: data.lat, lng: data.lon };
      // ‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡πÑ‡∏ß‡πâ
      currentDestination = destinationInput;
      
      // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏™‡∏†‡∏≤‡∏û‡∏õ‡∏Å‡∏ï‡∏¥
      navigateBtn.innerHTML = `
        <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path d="M3.9,17.4L2.5,19L1,17.5L9.2,9.3L13.6,13.6L17.4,9.8C18.2,9 19.5,9 20.3,9.8C21.1,10.6 21.1,11.9 20.3,12.7L16.4,16.6L13,13.1L3.9,17.4Z"/>
        </svg>
        <span>‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏≤‡∏¢</span>
      `;
      navigateBtn.disabled = false;
      
      // ‡∏•‡∏ö marker ‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÄ‡∏Å‡πà‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      if (destinationMarker) map.removeLayer(destinationMarker);
      if (pastRouteLine) map.removeLayer(pastRouteLine);
      if (futureRouteLine) map.removeLayer(futureRouteLine);
      if (airplaneMarker && map.hasLayer(airplaneMarker)) map.removeLayer(airplaneMarker);
      if (distanceLabel) map.removeLayer(distanceLabel);
      if (remainingDistanceLabel) map.removeLayer(remainingDistanceLabel);
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏° marker ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏≤‡∏¢
      const destinationIcon = createMarkerIcon('lavender');
      
      destinationMarker = L.marker([destination.lat, destination.lng], {
        icon: destinationIcon
      }).addTo(map)
        .bindPopup(createCustomPopup(`üìç ${destinationInput}`))
        .openPopup();
      
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏≤‡∏¢
      totalDistance = calculateDistance(
        currentPosition.lat, 
        currentPosition.lng, 
        destination.lat, 
        destination.lng
      );
      
      // ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏õ‡∏£‡∏∞‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏±‡∏ö‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏≤‡∏¢ (‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô)
      futureRouteLine = L.polyline([[currentPosition.lat, currentPosition.lng], [destination.lat, destination.lng]], {
        color: pastelColors.lavender,
        weight: 5,  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡∏à‡∏≤‡∏Å 4 ‡πÄ‡∏õ‡πá‡∏ô 5
        opacity: 0.8, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏∂‡∏ö‡∏à‡∏≤‡∏Å 0.7 ‡πÄ‡∏õ‡πá‡∏ô 0.8
        dashArray: '12, 8' // ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏õ‡∏£‡∏∞‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
      }).addTo(map);
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á)
      pastRouteLine = L.polyline([], {
        color: pastelColors.peach,
        weight: 5,  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡∏à‡∏≤‡∏Å 4 ‡πÄ‡∏õ‡πá‡∏ô 5
        opacity: 0.7 // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏∂‡∏ö‡∏à‡∏≤‡∏Å 0.5 ‡πÄ‡∏õ‡πá‡∏ô 0.7
      }).addTo(map);
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏° label ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á ‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
      const middlePoint = L.latLng(
        (currentPosition.lat + destination.lat) / 2,
        (currentPosition.lng + destination.lng) / 2
      );
      
      distanceLabel = L.marker(middlePoint, {
        icon: L.divIcon({
          html: createDistanceLabel(totalDistance),
          className: '',
          iconSize: [200, 30],
          iconAnchor: [100, 15]
        }),
        interactive: false
      }).addTo(map);
      
      // ‡∏õ‡∏£‡∏±‡∏ö view ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á
      map.fitBounds(futureRouteLine.getBounds(), { padding: [70, 70] });
      
      // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á
      cameraFollow = true;
      zoomOutTriggered = false;
      
      // ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á
      try {
        if (window.SoundSystem && typeof window.SoundSystem.play === 'function') {
          window.SoundSystem.play('transition');
        }
      } catch (err) {
        console.error('Error playing sound:', err);
      }
      
      // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ö‡∏¥‡∏ô
      showNotification(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á ${destinationInput} ‚úàÔ∏è`, 'info');
      animateAirplane(currentPosition, destination);
    } else {
      // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏™‡∏†‡∏≤‡∏û‡∏õ‡∏Å‡∏ï‡∏¥
      navigateBtn.innerHTML = `
        <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path d="M3.9,17.4L2.5,19L1,17.5L9.2,9.3L13.6,13.6L17.4,9.8C18.2,9 19.5,9 20.3,9.8C21.1,10.6 21.1,11.9 20.3,12.7L16.4,16.6L13,13.1L3.9,17.4Z"/>
        </svg>
        <span>‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏≤‡∏¢</span>
      `;
      navigateBtn.disabled = false;
      
      showNotification(data.error || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ üò¢', 'error');
    }
  } catch (error) {
    console.error('Error navigating:', error);
    
    // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏™‡∏†‡∏≤‡∏û‡∏õ‡∏Å‡∏ï‡∏¥
    const navigateBtn = document.getElementById('navigate');
    navigateBtn.innerHTML = `
      <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
        <path d="M3.9,17.4L2.5,19L1,17.5L9.2,9.3L13.6,13.6L17.4,9.8C18.2,9 19.5,9 20.3,9.8C21.1,10.6 21.1,11.9 20.3,12.7L16.4,16.6L13,13.1L3.9,17.4Z"/>
      </svg>
      <span>‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏≤‡∏¢</span>
    `;
    navigateBtn.disabled = false;
    
    showNotification('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á üò¢', 'error');
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ö‡∏¥‡∏ô
function animateAirplane(start, end) {
  animationInProgress = true;
  
  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  const totalDuration = 5000; // 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≠‡∏á‡∏à‡∏∏‡∏î
  function interpolate(start, end, fraction) {
    return start + (end - start) * fraction;
  }
  
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏°‡∏∏‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ö‡∏¥‡∏ô (‡∏≠‡∏á‡∏®‡∏≤)
  function calculateAngle(startLat, startLng, endLat, endLng) {
    const dLng = (endLng - startLng) * Math.PI / 180;
    const startLatRad = startLat * Math.PI / 180;
    const endLatRad = endLat * Math.PI / 180;
    
    const y = Math.sin(dLng) * Math.cos(endLatRad);
    const x = Math.cos(startLatRad) * Math.sin(endLatRad) - 
             Math.sin(startLatRad) * Math.cos(endLatRad) * Math.cos(dLng);
    
    let angle = Math.atan2(y, x) * 180 / Math.PI;
    // ‡∏õ‡∏£‡∏±‡∏ö‡∏°‡∏∏‡∏°‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
    angle = (angle + 360) % 360;
    return angle;
  }
  
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏°‡∏∏‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ö‡∏¥‡∏ô
  const angle = calculateAngle(
    start.lat, 
    start.lng, 
    end.lat, 
    end.lng
  );
  
  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ö‡∏¥‡∏ô
  const initialPos = [start.lat, start.lng];
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ö‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô‡πÅ‡∏•‡πâ‡∏ß
  const rotatedIcon = createAirplaneIcon(angle);
  airplaneMarker.setIcon(rotatedIcon);
  airplaneMarker.setLatLng(initialPos);
  
  // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ö‡∏¥‡∏ô‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
  airplaneMarker.addTo(map);
  
  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
  const startTime = Date.now();
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏° label ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
  remainingDistanceLabel = L.marker([0, 0], {
    icon: L.divIcon({
      html: createRemainingDistanceLabel(totalDistance),
      className: '',
      iconSize: [150, 30],
      iconAnchor: [75, 40]
    }),
    interactive: false
  }).addTo(map);
  
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏ü‡∏£‡∏°
  function moveStep() {
    const currentTime = Date.now();
    const elapsedTime = currentTime - startTime;
    const fraction = Math.min(elapsedTime / totalDuration, 1); // ‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 0-1
    
    if (fraction < 1) {
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      const lat = interpolate(start.lat, end.lat, fraction);
      const lng = interpolate(start.lng, end.lng, fraction);
      
      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ö‡∏¥‡∏ô
      airplaneMarker.setLatLng([lat, lng]);
      
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
      const remainingDistance = totalDistance * (1 - fraction);
      
      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï label ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ‡πÉ‡∏´‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ö‡∏¥‡∏ô
      remainingDistanceLabel.setLatLng([lat, lng]);
      remainingDistanceLabel.setIcon(L.divIcon({
        html: createRemainingDistanceLabel(remainingDistance),
        className: '',
        iconSize: [150, 30],
        iconAnchor: [75, 40]
      }));
      
      // ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ö‡∏¥‡∏ô‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤
      map.panTo([lat, lng]);
      
      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
      const pastCoords = [
        [start.lat, start.lng],
        [lat, lng]
      ];
      pastRouteLine.setLatLngs(pastCoords);
      
      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô
      const futureCoords = [
        [lat, lng],
        [end.lat, end.lng]
      ];
      futureRouteLine.setLatLngs(futureCoords);
      
      // ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≠‡πÉ‡∏ô‡πÄ‡∏ü‡∏£‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
      requestAnimationFrame(moveStep);
    } else {
      // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
      
      // ‡∏•‡∏ö label ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
      if (remainingDistanceLabel) {
        map.removeLayer(remainingDistanceLabel);
      }
      
      // ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏∂‡∏á‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏≤‡∏¢
      try {
        if (window.SoundSystem && typeof window.SoundSystem.play === 'function') {
          window.SoundSystem.play('celebration');
        }
      } catch (err) {
        console.error('Error playing sound:', err);
      }
      
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏∂‡∏á‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏≤‡∏¢
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡πÅ‡∏™‡∏á‡∏£‡∏∞‡πÄ‡∏ö‡∏¥‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏∂‡∏á‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏≤‡∏¢
      const arrivalEffect = L.divIcon({
        html: `
          <div class="arrival-effect" style="
            width: 150px;
            height: 150px;
            border-radius: 50%;
            background: radial-gradient(circle, rgba(224, 195, 252, 0.9) 0%, rgba(224, 195, 252, 0) 70%);
            animation: expand 1.2s ease-out forwards;
            position: absolute;
            top: -75px;
            left: -75px;
          "></div>
          <div style="position: absolute; top: -20px; left: 0; width: 100%; text-align: center; font-size: 28px; animation: pop 0.5s forwards;">üéØ</div>
        `,
        className: '',
        iconSize: [0, 0],
        iconAnchor: [0, 0]
      });
      
      const effectMarker = L.marker([end.lat, end.lng], { icon: arrivalEffect }).addTo(map);
      
      // ‡∏•‡∏ö‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 1.2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      setTimeout(() => {
        map.removeLayer(effectMarker);
      }, 1200);
      
      // ‡∏•‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ö‡∏¥‡∏ô
      if (pastRouteLine) map.removeLayer(pastRouteLine);
      if (futureRouteLine) map.removeLayer(futureRouteLine);
      if (distanceLabel) map.removeLayer(distanceLabel);
      map.removeLayer(airplaneMarker);
      
      // ‡∏ã‡∏π‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏à‡∏∏‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡πÉ‡∏Å‡∏•‡πâ‡∏°‡∏≤‡∏Å‡πÜ
      // ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ã‡∏π‡∏°‡πÅ‡∏ö‡∏ö 2 ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤
      setTimeout(() => {
        // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏ã‡∏π‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏°‡∏∑‡∏≠‡∏á
        map.flyTo([end.lat, end.lng], 14, {
          duration: 1.5
        });
        
        // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ã‡∏π‡∏°‡πÅ‡∏£‡∏Å‡πÄ‡∏™‡∏£‡πá‡∏à ‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∂‡∏á‡∏ã‡∏π‡∏°‡∏ï‡πà‡∏≠
        map.once('moveend', function() {
          // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏ã‡∏π‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ñ‡∏ô‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏∂‡∏Å (‡πÉ‡∏Å‡∏•‡πâ‡∏°‡∏≤‡∏Å‡πÜ)
          map.flyTo([end.lat, end.lng], 17, {
            duration: 1.5
          });
          
          // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ã‡∏π‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à ‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∂‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
          map.once('moveend', function() {
            setTimeout(() => {
              // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
              currentPosition = end;
              if (currentMarker) map.removeLayer(currentMarker);
              currentMarker = destinationMarker;
              
              // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
              console.log('Opening rating modal for:', currentDestination, end.lat, end.lng);
              openRatingModal(currentDestination, end.lat, end.lng);
              
              // ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
              animationInProgress = false;
            }, 500);
          });
        });
      }, 200);
    }
  }
  
  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
  moveStep();
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
function showNotification(message, type = 'success', animate = false) {
  const notification = document.getElementById('notification');
  const notificationMessage = document.getElementById('notification-message');
  
  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
  switch(type) {
    case 'error':
      notification.style.background = pastelColors.primary; // Pink
      notification.style.color = '#a24857';
      break;
    case 'warning':
      notification.style.background = pastelColors.accent; // Light Yellow
      notification.style.color = '#8c7800';
      break;
    case 'info':
      notification.style.background = pastelColors.secondary; // Light Blue
      notification.style.color = '#336b72';
      break;
    case 'success':
    default:
      notification.style.background = pastelColors.mint; // Mint Green
      notification.style.color = '#2d7a5d';
      break;
  }
  
  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
  notificationMessage.textContent = message;
  
  // ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡πâ‡∏°‡∏µ‡πÅ‡∏≠‡∏ô‡∏¥‡πÄ‡∏°‡∏ä‡∏±‡∏ô
  if (animate) {
    notificationMessage.classList.add('animate-bounce');
    setTimeout(() => {
      notificationMessage.classList.remove('animate-bounce');
    }, 1000);
  }
  
  // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
  notification.classList.add('active');
  
  // ‡∏ã‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  setTimeout(() => {
    notification.classList.remove('active');
  }, 3000);
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
document.addEventListener('DOMContentLoaded', initMap);